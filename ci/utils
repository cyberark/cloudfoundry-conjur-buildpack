#!/usr/bin/env bash

export DOCKER_COMPOSE_FILE="../tests/docker-compose.yml"
export CONTAINER_FEATURES_DIR="/cyberark/cloudfoundry-conjur-buildpack/tests/integration"

function announce {
  echo -e """
  --------------
  ${1}
  --------------
  """
}

function finish {
  announce 'Removing environment...'
  docker compose -f "$DOCKER_COMPOSE_FILE" down -v
}

function package_and_unpack_buildpack {
  announce 'Packaging and Unpacking the Buildpack...'
  ../package.sh
  ../unpack.sh
}

# Set up the containers to run in their own namespace
function setup_env {
  announce 'Setting environment variables...'
  COMPOSE_PROJECT_NAME="$(basename "$PWD")_$(openssl rand -hex 3)"
  export COMPOSE_PROJECT_NAME
  echo "COMPOSE_PROJECT_NAME: $COMPOSE_PROJECT_NAME"

  BRANCH_NAME=${BRANCH_NAME:-$(git symbolic-ref --short HEAD)}
  export BRANCH_NAME
  echo "BRANCH_NAME: $BRANCH_NAME"
}

function build_test_images {
  announce 'Building test images...'
  docker compose -f "$DOCKER_COMPOSE_FILE" build
}

function start_conjur {
  announce 'Waiting for Conjur to start...'
  docker compose -f "$DOCKER_COMPOSE_FILE" up -d conjur

  docker compose -f "$DOCKER_COMPOSE_FILE" exec -T conjur conjurctl wait -r 45 -p 80
}


function addComputeIPToIPManager(){
  announce "Adding TAS Compute IP to IPManager"
  pushd "$(git rev-parse --show-toplevel)" >/dev/null
    compute_ip="$(docker run \
      --rm \
      -e HAMMERFILE \
      --volume "${PWD}:${PWD}" \
      --workdir "${PWD}" \
      registry.tld/tanzuclis \
        ./ci/get_compute_ip)"
    ipmanager add "${compute_ip}"
  popd > /dev/null
  echo "Done"
}

# Add or remove IP from IPManager's allow list
function ipmanager(){
  verb="${1:-add}"
  ip="${2}"
  echo "IPmanager: ${verb} ${ip}"
  curl \
  --silent \
  --show-error \
  --fail \
  -X POST  \
  -H "Content-Type: application/json" \
  -d "{\"sharedsecret\":\"${IPMANAGER_TOKEN}\", \"ip\":\"${ip}\", \"expiry_hours\": \"2\"}" \
  https://ipmanager.itp.conjur.net/${verb}ip
}

function getISVCFCreds(){
  announce "Configuring ISV TAS cluster via hammerfile"
  # The hammerfile is written to the root of the repo
  # So need to run from the root so its accessible
  # within the container.
  pushd "$(git rev-parse --show-toplevel)" >/dev/null
    CF_ADMIN_PASSWORD="$(docker run \
      --rm \
      -e HAMMERFILE \
      --volume "${PWD}:${PWD}" \
      --workdir "${PWD}" \
      registry.tld/tanzuclis \
        bash -c 'source $(hammer -t "${HAMMERFILE}" cf-login --file |tail -n1)>/dev/null; echo $CF_PASSWORD')"
    # cf-login --file writes a script to a file and outputs its path.
    # The script exports CF_PASSWORD, so we source the script then echo CF_PASSWORD and capture
    # it in CF_ADMIN_PASSWORD
  popd >/dev/null

  CF_API_ENDPOINT="https://api.$(jq -r .sys_domain "${HAMMERFILE}")"

  export CF_ADMIN_PASSWORD
  export CF_API_ENDPOINT
  echo "Done"
}
